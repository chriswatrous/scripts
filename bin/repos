#! /usr/bin/env python
import eventlet
eventlet.monkey_patch()  # noqa

import colors
import os
import sys
import re
from tabulate import tabulate
from subprocess import call, check_output
from os.path import join, basename, expanduser


def main():
    width = int(check_output(['stty', 'size']).split()[1])

    with open(expanduser('~/.my_repos')) as f:
        repos = f.read().strip('\n').split('\n')

    if '-f' in sys.argv:
        print 'fetching from from remotes...'
        tasks = [eventlet.spawn(fetch, x) for x in repos]
        for task in tasks:
            task.wait()

    for repo in repos:
        os.chdir(repo)

        # print colors.blue('=' * width)
        print colors.blue(basename(repo))
        output = check_output(['git', '-c', 'color.status=always', 'status',
                               '--short']).rstrip()
        if output:
            print output
            print

        branch_status(repo)
        print


    # print colors.blue('=' * width)


def limit_width(line, width):
    # Filter out ansi color sequences.
    filtered_line = re.sub('\x1b.*?m', '', line)

    if len(filtered_line) > width:
        return line[:width + len(line) - len(filtered_line)]
    else:
        return line


def fetch(repo):
    call(['git', 'fetch', '--all', '--prune'], cwd=repo)


def branch_status(repo):
    output = check_output(['git', 'branch', '-a'], cwd=repo)
    if 'upstream/develop' in output:
        home_branch = 'upstream/develop'
    elif 'upstream/master' in output:
        home_branch = 'upstream/master'
    else:
        home_branch = 'origin/master'
    branches = local_branches(repo)
    if branches:
        b_width = max(len(x) for x in branches)
    for branch in branches:
        output = check_output(['git', 'rev-list', '--count', '--left-right',
                               '{}...{}'.format(branch, home_branch)],
                              cwd=repo)
        ahead, behind = [int(x) for x in output.strip().split()]

        if ahead == 0 and behind == 0:
            msg = ''
        elif ahead == 0:
            msg = 'merged'
        else:
            msg = '{} ahead, {} behind'.format(ahead, behind)

        print '  {} {}'.format(colors.green(branch.ljust(b_width)), msg)


def local_branches(repo):
    heads_dir = join(repo, '.git/refs/heads')
    return [x[len(heads_dir)+1:] for x in get_files(heads_dir)]


def get_files(dir):
    out = []
    for root, dirs, files in os.walk(dir):
        for name in files:
            out.append(join(root, name))
    return out


if __name__ == '__main__':
    import ipdb
    with ipdb.launch_ipdb_on_exception():
        main()
