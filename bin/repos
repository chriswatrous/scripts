#!/usr/bin/env python
import eventlet
eventlet.monkey_patch()  # noqa

import colors
import os
import sys
import re
from tabulate import tabulate
from subprocess32 import call, check_output, check_call
from os.path import join, basename, expanduser
from streams import Stream
from pyrsistent import pvector


def main():
    width = int(check_output(['stty', 'size']).split()[1])
    repos = _readfile(expanduser('~/.my_repos')).strip('\n').split('\n')
    repos = [expanduser(x) for x in repos]

    # Update repos.
    if '-f' in sys.argv:
        print 'updating repos...'
        tasks = [eventlet.spawn(_update_repo, x) for x in repos]
        for task in tasks:
            task.wait()

    # Print status of repos.
    print
    for repo in repos:
        os.chdir(repo)
        home = _home_branch(repo)

        status = _git_output('-c', 'color.status=always', 'status', '--short'
                             ).rstrip()

        msg = colors.blue(basename(repo))
        current = _current_branch(repo)
        if home not in current:
            msg += ' ' + colors.yellow(current)
        print msg

        if status:
            print status
            print

        _branch_status(repo, home)
        print


def _update_repo(repo):
    home = _home_branch(repo)
    head = _readfile(join(repo, '.git/HEAD')).strip()
    home_commit = _git_output('rev-parse', home, cwd=repo).strip()
    if (
        head == 'ref: refs/heads/master' and
        _git_output('status', '--short', cwd=repo).strip() == ''
    ):
        action = lambda: _git('merge', home, cwd=repo)
    elif head == home_commit:
        action = lambda: check_call([
            'bash', '-c',
            'git checkout "{}" &> /dev/null'.format(home)
        ], cwd=repo)
    else:
        action = lambda: None
    _git('fetch', '--all', '--prune', cwd=repo)
    action()
    return home


def _current_branch(repo):
    head = _readfile(join(repo, '.git/HEAD')).strip()

    prefix = 'ref: refs/heads/'
    if head.startswith(prefix):
        return head[len(prefix):]
    else:
        refs = _refs_for_commit_id(head, repo)
        if refs:
            return '({})'.format(' '.join(refs))
        else:
            return head


def _refs_for_commit_id(commit_id, cwd):
    return pvector(
        Stream(_git_output('show-ref', '--dereference', cwd=cwd).strip()
               .splitlines())
        .filter(lambda x: x.startswith(commit_id))
        .map(lambda x: x.strip().split()[1])
        .map(lambda x: _strip_prefix('refs/heads/', x))
        .map(lambda x: _strip_prefix('refs/remotes/', x))
        .map(lambda x: _strip_prefix('refs/tags/', x))
    )


def _strip_prefix(prefix, text):
    if text.startswith(prefix):
        return text[len(prefix):]
    else:
        return text


def _branch_status(repo, home_b):
    branches = _local_branches(repo)
    if branches:
        b_width = max(len(x) for x in branches)
    for branch in branches:
        output = _git_output('rev-list', '--count', '--left-right',
                             '{}...{}'.format(branch, home_b),
                             cwd=repo)
        ahead, behind = [int(x) for x in output.strip().split()]

        if ahead == 0 and behind == 0:
            msg = ''
        elif ahead == 0:
            msg = colors.yellow('merged')
        else:
            msg = '{} ahead, {} behind'.format(ahead, behind)

        print '  {} {}'.format(colors.green(branch.ljust(b_width)), msg)


def _home_branch(repo):
    output = _git_output('branch', '-a', cwd=repo)
    if 'upstream/develop' in output:
        return 'upstream/develop'
    elif 'upstream/master' in output:
        return 'upstream/master'
    else:
        return 'origin/master'


def _local_branches(repo):
    return pvector(
        Stream(_git_output('branch', cwd=repo).strip('\n').splitlines())
        .map(lambda x: x[2:].strip())
        .filter(lambda x: not x.startswith('('))
    )


def _get_files(dir):
    out = []
    for root, dirs, files in os.walk(dir):
        for name in files:
            out.append(join(root, name))
    return out


def _readfile(path):
    with open(path) as f:
        return f.read()


def _git(*command, **kwargs):
    cwd = kwargs.get('cwd')
    return call(('git',) + command, cwd=cwd)


def _git_output(*command, **kwargs):
    cwd = kwargs.get('cwd')
    return check_output(('git',) + command, cwd=cwd)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print '{}: {}'.format(type(e).__name__, e)
        _, _ , tb = sys.exc_info()
        import ipdb
        ipdb.post_mortem(tb)
