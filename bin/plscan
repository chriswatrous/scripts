#! /usr/bin/env python
import sys
import os
import re
from os.path import join
from subprocess32 import Popen, call, check_output, PIPE
from pyrsistent import pvector, v
from streams import Stream


def main():
    pylint_command = v('pylint', '-j', '8', '-d', 'C', '-r', 'n', '-f',
                       'colorized')

    if 'all' in sys.argv:
        run_pipe(pylint_command + get_python_files(), v('less', '-R'))

    else:
        include_patterns = v(
            '\*\*\*\*',
            'unused-import',
            'undefined',
            'no-name-in-module',
            'import-error',
            # 'unused-variable',
            # 'unused-argument',
            'relative-import',
            'anomalous-backslash-in-string',
            'no-member',
            'global-variable-not-assigned',
        )
        exclude_patterns = v(
            "Instance of 'LookupDict' has no",
            "No name 'restplus' in module 'flask.ext'",
            "No name 'restful' in module 'flask.ext'",
            "Unable to import 'flask.ext.restplus'",
            "Unable to import 'flask.ext.restful'",
            "Unable to import 'flask_restful_swagger'",
            "Instance of 'PSet' has no",
            "Instance of 'tuple' has no",
            "Instance of 'PythonPVector' has no",
        )
        run_pipe(
            pylint_command + get_python_files(),
            v('grep') + make_grep_pattern_options(include_patterns),
            v('grep', '-v') + make_grep_pattern_options(exclude_patterns),
            v('less', '-R'),
        )


def run_pipe(*commands):
    first, middle, last = first_middle_last(commands)
    procs = [Popen(first, stdout=PIPE)]
    last_proc = procs[0]
    for command in middle:
        proc = Popen(command, stdin=last_proc.stdout, stdout=PIPE)
        last_proc = proc
        procs.append(proc)
    procs.append(Popen(last, stdin=last_proc.stdout))
    procs[-1].wait()


def get_python_files():
    return pvector(filter(is_python_file,
                          recursively_iterate_through_files('.')))


def make_grep_pattern_options(patterns):
    return pvector(
        Stream(patterns)
        .map(lambda x: ['-e', x])
        .chain()
    )


def is_python_file(path):
    return (path.endswith('.py') or
            re.match('#!.*python', read_first_line(path)))


def read_first_line(path):
    with open(path) as f:
        return f.readline()


def recursively_iterate_through_files(path):
    for root, dirs, files in os.walk(path):
        for file in files:
            yield join(root, file)


def first_middle_last(items):
    return items[0], items[1:-1], items[-1]


if __name__ == '__main__':
    main()
