#!/usr/bin/env python3
import sys
import re
from subprocess import check_call, check_output, STDOUT


def main():
    if not is_working_dir_clean():
        fail('Working directory is not clean!')
    if len(sys.argv) > 1:
        get_new_pr_branch()
    else:
        update_existing_pr_branch()


def get_new_pr_branch():
    num = sys.argv[1]
    check_call(['git', 'fetch', 'upstream', 'refs/pull/{}/head'.format(num)])
    check_call(['git', 'checkout', 'FETCH_HEAD'])
    check_call(['git', 'checkout', '-b', 'pr{}'.format(num)])


def update_existing_pr_branch():
    branch = current_branch()
    match = re.match(r'^pr(\d+)$', branch)
    if not match:
        fail('Not a PR branch.')
    pr_num = match.groups()[0]
    check_call(['git', 'fetch', 'upstream',
                'refs/pull/{}/head'.format(pr_num)])
    check_call(['git', 'reset', '--hard', 'FETCH_HEAD'])


def fail(msg):
    print(msg)
    sys.exit(1)


def is_working_dir_clean():
    out = check_output(['git', 'status', '--short'], stderr=STDOUT)
    return out.strip() == b''


def current_branch():
    branch = check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])
    if branch == b'HEAD':
        branch = check_output(['git', 'rev-parse', 'HEAD'])
    return branch.decode('utf-8')


if __name__ == '__main__':
    main()
